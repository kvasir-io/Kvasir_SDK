name: Build and Push Docker Container

on:
    schedule:
        # Run on the 1st of every month at 02:00 UTC
        - cron: '0 2 1 * *'
    push:
        branches: [master]
    workflow_dispatch:
        inputs:
            rebuild_build_env:
                description: 'Force rebuild build environment'
                required: false
                type: boolean
                default: false

jobs:
    check-build-needed:
        runs-on: ubuntu-latest
        outputs:
            should-build: ${{ steps.check-build.outputs.should-build }}
            build-date: ${{ steps.check-build.outputs.build-date }}
            env-files-changed: ${{ steps.check-env-changes.outputs.env-files-changed }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                submodules: recursive

            - name: Check if build environment files changed
              id: check-env-changes
              run: |
                # Check if build environment related files changed
                if [ "${{ github.event_name }}" = "push" ]; then
                  # Get changed files in the push
                  CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
                  echo "Changed files: $CHANGED_FILES"

                  # Check if build environment files changed
                  if echo "$CHANGED_FILES" | grep -E "(scripts/Dockerfile\.build-env|\.github/workflows/docker-build\.yml)" > /dev/null; then
                    echo "env-files-changed=true" >> $GITHUB_OUTPUT
                    echo "Build environment files changed"
                  else
                    echo "env-files-changed=false" >> $GITHUB_OUTPUT
                    echo "No build environment files changed"
                  fi
                else
                  # For schedule or manual triggers with input, check build environment
                  if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ inputs.rebuild_build_env }}" = "true" ]; then
                    echo "env-files-changed=true" >> $GITHUB_OUTPUT
                    echo "Non-push trigger - checking build environment"
                  else
                    echo "env-files-changed=false" >> $GITHUB_OUTPUT
                    echo "Manual/external trigger - skipping build environment"
                  fi
                fi

            - name: Check if build is needed
              id: check-build
              run: |
                # Get current date in YYYY.MM.DD format (Arch ISO style)
                BUILD_DATE=$(date +%Y.%m.%d)
                echo "build-date=$BUILD_DATE" >> $GITHUB_OUTPUT

                # Check if image exists and get its creation date
                IMAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
                  "https://hub.docker.com/v2/repositories/kvasirio/build_environment/tags/latest/")

                if [ "$IMAGE_EXISTS" = "200" ]; then
                  # Get image creation date from DockerHub API
                  IMAGE_DATE=$(curl -s \
                    "https://hub.docker.com/v2/repositories/kvasirio/build_environment/tags/latest/" | \
                    jq -r '.last_updated' | cut -d'T' -f1)

                  # Convert to epoch for comparison
                  IMAGE_EPOCH=$(date -d "$IMAGE_DATE" +%s)
                  CURRENT_EPOCH=$(date +%s)
                  DAYS_OLD=$(( (CURRENT_EPOCH - IMAGE_EPOCH) / 86400 ))

                  echo "Image is $DAYS_OLD days old"

                  # Build if image is >30 days old, or if workflow was triggered
                  # (Path filters ensure we only run when relevant files change)
                  if [ $DAYS_OLD -gt 30 ] || \
                     [ "${{ github.event_name }}" = "workflow_dispatch" ] || \
                     [ "${{ github.event_name }}" = "schedule" ] || \
                     [ "${{ github.event_name }}" = "push" ]; then
                    echo "should-build=true" >> $GITHUB_OUTPUT
                    echo "Build needed: Image is $DAYS_OLD days old, triggered by ${{ github.event_name }}"
                  else
                    echo "should-build=false" >> $GITHUB_OUTPUT
                    echo "Build not needed: Image is recent and no trigger conditions met"
                  fi
                else
                  echo "should-build=true" >> $GITHUB_OUTPUT
                  echo "Build needed: Image does not exist"
                fi

    docker-build-push:
        needs: check-build-needed
        if: needs.check-build-needed.outputs.should-build == 'true' && needs.check-build-needed.outputs.env-files-changed == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                submodules: recursive

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to DockerHub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                context: scripts
                file: scripts/Dockerfile.build-env
                push: true
                platforms: linux/amd64
                tags: |
                    kvasirio/build_environment:latest
                    kvasirio/build_environment:${{ needs.check-build-needed.outputs.build-date }}
                cache-from: type=gha
                cache-to: type=gha,mode=max

    kvasir-build-push:
        needs: [check-build-needed, docker-build-push]
        if: always() && (needs.docker-build-push.result == 'success' || (needs.check-build-needed.outputs.env-files-changed == 'false' && github.event_name == 'push') || (github.event_name != 'push') || github.event_name == 'workflow_dispatch')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                submodules: recursive

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to DockerHub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Kvasir Docker image
              uses: docker/build-push-action@v5
              with:
                context: .
                file: scripts/Dockerfile.kvasir
                push: true
                platforms: linux/amd64
                tags: |
                    kvasirio/kvasir:latest
                    kvasirio/kvasir:${{ needs.check-build-needed.outputs.build-date }}
                cache-from: type=gha
                cache-to: type=gha,mode=max

            - name: Trigger chip container rebuilds
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.CROSS_REPO_TOKEN }}
                script: |
                    // Array of chip repositories to trigger
                    const chipRepos = [
                        {
                            repo: 'chip_rp2350',
                            workflow: 'rp2350-docker-build.yml',
                            name: 'RP2350'
                        }
                        // Add more chip repositories here as needed
                        // Example:
                        // {
                        //     repo: 'chip_rp2040',
                        //     workflow: 'rp2040-docker-build.yml',
                        //     name: 'RP2040'
                        // }
                    ];

                    // Trigger each chip repository
                    const results = [];
                    for (const chip of chipRepos) {
                        try {
                            await github.rest.actions.createWorkflowDispatch({
                                owner: context.repo.owner,
                                repo: chip.repo,
                                workflow_id: chip.workflow,
                                ref: 'master'
                            });
                            console.log(`✅ Successfully triggered ${chip.name} container rebuild (${chip.repo})`);
                            results.push(`✅ ${chip.name}: Success`);
                        } catch (error) {
                            console.log(`❌ Could not trigger ${chip.name} container rebuild: ${error.message}`);
                            results.push(`❌ ${chip.name}: ${error.message}`);
                            // Continue with other repos even if one fails
                        }
                    }

                    // Summary
                    console.log('\n=== Chip Container Trigger Summary ===');
                    results.forEach(result => console.log(result));

                    // Set output for use in notifications
                    core.setOutput('trigger-results', results.join('; '));

    notify-status:
        runs-on: ubuntu-latest
        needs: [check-build-needed, docker-build-push, kvasir-build-push]
        if: always()
        steps:
            - name: Set build status
              run: |
                ENV_CHANGED="${{ needs.check-build-needed.outputs.env-files-changed }}"
                ENV_RESULT="${{ needs.docker-build-push.result }}"
                KVASIR_RESULT="${{ needs.kvasir-build-push.result }}"

                if [ "${{ needs.check-build-needed.outputs.should-build }}" = "false" ]; then
                  echo "BUILD_STATUS=skipped" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=⏭️ Docker build skipped - image is recent and no relevant files changed" >> $GITHUB_ENV
                elif [ "$ENV_CHANGED" = "true" ] && [ "$ENV_RESULT" = "success" ] && [ "$KVASIR_RESULT" = "success" ]; then
                  echo "BUILD_STATUS=success" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=✅ Both containers built and pushed: kvasirio/build_environment:latest and kvasirio/kvasir:latest" >> $GITHUB_ENV
                elif [ "$ENV_CHANGED" = "false" ] && [ "$KVASIR_RESULT" = "success" ]; then
                  echo "BUILD_STATUS=success" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=✅ Kvasir container built and pushed: kvasirio/kvasir:latest (build environment unchanged)" >> $GITHUB_ENV
                elif [ "$ENV_CHANGED" = "true" ] && [ "$ENV_RESULT" = "success" ] && [ "$KVASIR_RESULT" != "success" ]; then
                  echo "BUILD_STATUS=partial" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=⚠️ Build environment succeeded but kvasir container failed" >> $GITHUB_ENV
                elif [ "${{ needs.docker-build-push.result }}" = "failure" ]; then
                  echo "BUILD_STATUS=failure" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=❌ Docker build failed - check workflow logs" >> $GITHUB_ENV
                else
                  echo "BUILD_STATUS=cancelled" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=🚫 Docker build was cancelled" >> $GITHUB_ENV
                fi

            - name: Update commit status
              uses: actions/github-script@v7
              with:
                script: |
                    const status = process.env.BUILD_STATUS;
                    const message = process.env.BUILD_MESSAGE;

                    let state;
                    if (status === 'success') state = 'success';
                    else if (status === 'failure') state = 'failure';
                    else if (status === 'skipped') state = 'success';
                    else if (status === 'partial') state = 'failure';
                    else state = 'error';

                    await github.rest.repos.createCommitStatus({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      sha: context.sha,
                      state: state,
                      target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
                      description: message,
                      context: 'Docker Build'
                    });

            - name: Create summary
              run: |-
                echo "## Docker Build Status" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "${{ env.BUILD_MESSAGE }}" >> $GITHUB_STEP_SUMMARY

                echo "" >> $GITHUB_STEP_SUMMARY
                echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY

                # Show build environment tags if it was built
                if [ "${{ needs.check-build-needed.outputs.env-files-changed }}" = "true" ] && \
                   [ "${{ needs.docker-build-push.result }}" = "success" ]; then
                  echo "- \`kvasirio/build_environment:latest\`" >> $GITHUB_STEP_SUMMARY
                  echo "- \`kvasirio/build_environment:${{ needs.check-build-needed.outputs.build-date }}\`" >> $GITHUB_STEP_SUMMARY
                fi

                # Show kvasir tags if it was built
                if [ "${{ needs.kvasir-build-push.result }}" = "success" ]; then
                  echo "- \`kvasirio/kvasir:latest\`" >> $GITHUB_STEP_SUMMARY
                  echo "- \`kvasirio/kvasir:${{ needs.check-build-needed.outputs.build-date }}\`" >> $GITHUB_STEP_SUMMARY
                fi

                echo "" >> $GITHUB_STEP_SUMMARY

                # Show links for built containers
                if [ "${{ needs.docker-build-push.result }}" = "success" ]; then
                  echo "[View Build Environment on DockerHub](https://hub.docker.com/r/kvasirio/build_environment)" >> $GITHUB_STEP_SUMMARY
                fi

                if [ "${{ needs.kvasir-build-push.result }}" = "success" ]; then
                  echo "[View Kvasir on DockerHub](https://hub.docker.com/r/kvasirio/kvasir)" >> $GITHUB_STEP_SUMMARY
                fi

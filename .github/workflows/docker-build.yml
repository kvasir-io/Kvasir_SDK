name: Build and Push Docker Container

on:
    schedule:
        # Run on the 1st of every month at 02:00 UTC
        - cron: '0 2 1 * *'
    push:
        branches: [master]
        paths: ['scripts/Dockerfile']
    workflow_dispatch:

jobs:
    check-build-needed:
        runs-on: ubuntu-latest
        outputs:
            should-build: ${{ steps.check-build.outputs.should-build }}
            build-date: ${{ steps.check-build.outputs.build-date }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check if build is needed
              id: check-build
              run: |
                # Get current date in YYYY.MM.DD format (Arch ISO style)
                BUILD_DATE=$(date +%Y.%m.%d)
                echo "build-date=$BUILD_DATE" >> $GITHUB_OUTPUT

                # Check if image exists and get its creation date
                IMAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
                  "https://hub.docker.com/v2/repositories/kvasirio/build_environment/tags/latest/")

                if [ "$IMAGE_EXISTS" = "200" ]; then
                  # Get image creation date from DockerHub API
                  IMAGE_DATE=$(curl -s \
                    "https://hub.docker.com/v2/repositories/kvasirio/build_environment/tags/latest/" | \
                    jq -r '.last_updated' | cut -d'T' -f1)

                  # Convert to epoch for comparison
                  IMAGE_EPOCH=$(date -d "$IMAGE_DATE" +%s)
                  CURRENT_EPOCH=$(date +%s)
                  DAYS_OLD=$(( (CURRENT_EPOCH - IMAGE_EPOCH) / 86400 ))

                  echo "Image is $DAYS_OLD days old"

                  # Check if Dockerfile changed in this push
                  DOCKERFILE_CHANGED=false
                  if [ "${{ github.event_name }}" = "push" ]; then
                    if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -q "scripts/Dockerfile"; then
                      DOCKERFILE_CHANGED=true
                      echo "Dockerfile has changed"
                    fi
                  fi

                  # Build if image is older than 30 days, Dockerfile changed, or manual trigger
                  if [ $DAYS_OLD -gt 30 ] || [ "$DOCKERFILE_CHANGED" = "true" ] || \
                     [ "${{ github.event_name }}" = "workflow_dispatch" ] || \
                     [ "${{ github.event_name }}" = "schedule" ]; then
                    echo "should-build=true" >> $GITHUB_OUTPUT
                    echo "Build needed: Image is $DAYS_OLD days old, Dockerfile changed: $DOCKERFILE_CHANGED"
                  else
                    echo "should-build=false" >> $GITHUB_OUTPUT
                    echo "Build not needed: Image is recent and Dockerfile unchanged"
                  fi
                else
                  echo "should-build=true" >> $GITHUB_OUTPUT
                  echo "Build needed: Image does not exist"
                fi

    docker-build-push:
        needs: check-build-needed
        if: needs.check-build-needed.outputs.should-build == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to DockerHub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                context: scripts
                file: scripts/Dockerfile
                push: true
                platforms: linux/amd64
                tags: |
                    kvasirio/build_environment:latest
                    kvasirio/build_environment:${{ needs.check-build-needed.outputs.build-date }}
                cache-from: type=gha
                cache-to: type=gha,mode=max

            - name: Update repository description
              uses: peter-evans/dockerhub-description@v4
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}
                repository: kvasirio/build_environment
                short-description: "Kvasir firmware development environment based on Arch Linux"
                readme-filepath: ./scripts/README.md
              continue-on-error: true

    notify-status:
        runs-on: ubuntu-latest
        needs: [check-build-needed, docker-build-push]
        if: always()
        steps:
            - name: Set build status
              run: |
                if [ "${{ needs.check-build-needed.outputs.should-build }}" = "false" ]; then
                  echo "BUILD_STATUS=skipped" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=⏭️ Docker build skipped - image is recent and Dockerfile unchanged" >> $GITHUB_ENV
                elif [ "${{ needs.docker-build-push.result }}" = "success" ]; then
                  echo "BUILD_STATUS=success" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=✅ Docker image built and pushed to kvasirio/build_environment:latest" >> $GITHUB_ENV
                elif [ "${{ needs.docker-build-push.result }}" = "failure" ]; then
                  echo "BUILD_STATUS=failure" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=❌ Docker build failed - check workflow logs" >> $GITHUB_ENV
                else
                  echo "BUILD_STATUS=cancelled" >> $GITHUB_ENV
                  echo "BUILD_MESSAGE=🚫 Docker build was cancelled" >> $GITHUB_ENV
                fi

            - name: Update commit status
              uses: actions/github-script@v7
              with:
                script: |
                    const status = process.env.BUILD_STATUS;
                    const message = process.env.BUILD_MESSAGE;

                    let state;
                    if (status === 'success') state = 'success';
                    else if (status === 'failure') state = 'failure';
                    else if (status === 'skipped') state = 'success';
                    else state = 'error';

                    await github.rest.repos.createCommitStatus({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      sha: context.sha,
                      state: state,
                      target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
                      description: message,
                      context: 'Docker Build'
                    });

            - name: Create summary
              run: |-
                echo "## Docker Build Status" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "${{ env.BUILD_MESSAGE }}" >> $GITHUB_STEP_SUMMARY

                if [ "${{ needs.check-build-needed.outputs.should-build }}" = "true" ] && \
                   [ "${{ needs.docker-build-push.result }}" = "success" ]; then
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
                  echo "- \`kvasirio/build_environment:latest\`" >> $GITHUB_STEP_SUMMARY
                  echo "- \`kvasirio/build_environment:${{ needs.check-build-needed.outputs.build-date }}\`" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "[View on DockerHub](https://hub.docker.com/r/kvasirio/build_environment)" >> $GITHUB_STEP_SUMMARY
                fi
